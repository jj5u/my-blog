name: CI/CD Pipeline # 워크플로우 이름

on:
  push:
    branches:
      - main # main 브랜치에 push될 때 실행
  pull_request:
    branches:
      - main # main 브랜치에 PR이 올라오면 실행

jobs:
  build:
    runs-on: ubuntu-latest # 빌드를 수행할 환경 (Ubuntu 최신 버전)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3 # 레포지토리 코드 체크아웃

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/* # Node.js 최신 버전 설치
          cache: "yarn" # yarn 패키지 캐시 설정

      - name: Install Dependencies
        run: yarn install --frozen-lockfile # 의존성 설치 (lockfile 기반)

      - name: Set Environment Variables # ✅ 환경 변수는 `build` 전에 설정되어야 함
        run: |
          echo "VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV

      - name: Run Tests
        run: yarn test # Jest 같은 테스트 실행

      - name: Build Project
        run: yarn build # Vite 빌드 실행

  deploy:
    needs: build # build job이 성공해야 실행됨
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # main 브랜치에서만 실행

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # ✅ 모든 커밋 히스토리를 가져와서 `gh-pages` 브랜치 최신화 가능

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: "yarn"

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3 # GitHub Pages 배포
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist # 빌드된 파일이 있는 폴더
          force_orphan: true # ✅ 기존 `gh-pages` 브랜치를 삭제하고 새로 생성
